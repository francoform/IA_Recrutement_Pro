// Stockage des codes de v√©rification (compatible Edge Runtime)
// S√©par√© des routes API pour √©viter les conflits avec nodemailer

interface VerificationData {
  code: string
  expires: number
  attempts: number
}

// Stockage global pour partager les donn√©es entre les routes API
declare global {
  var verificationCodes: Map<string, VerificationData> | undefined
}

// Stockage temporaire des codes (en production, utiliser Redis ou une base de donn√©es)
export const verificationCodes = globalThis.verificationCodes ?? new Map<string, VerificationData>()
if (!globalThis.verificationCodes) {
  globalThis.verificationCodes = verificationCodes
}

// Nettoyage automatique des codes expir√©s
setInterval(() => {
  const now = Date.now()
  for (const [email, data] of verificationCodes.entries()) {
    if (data.expires < now) {
      verificationCodes.delete(email)
    }
  }
}, 60000) // Nettoyage toutes les minutes

// Fonction utilitaire pour g√©n√©rer un code de v√©rification
export function generateVerificationCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

// Fonction pour stocker un code de v√©rification
export function storeVerificationCode(email: string, code: string, expiresInMinutes: number = 10): void {
  const expires = Date.now() + (expiresInMinutes * 60 * 1000)
  const data = {
    code,
    expires,
    attempts: 0
  }
  verificationCodes.set(email, data)
  console.log('üíæ Code stock√© pour:', email, 'Code:', code, 'Expire √†:', new Date(expires).toLocaleString())
  console.log('üíæ Taille du Map apr√®s stockage:', verificationCodes.size)
}

// Fonction pour v√©rifier un code
export function verifyCode(email: string, code: string): { valid: boolean; expired: boolean; attempts: number } {
  console.log('üîç V√©rification du code:', { email, code })
  console.log('üîç Donn√©es stock√©es pour', email, ':', verificationCodes.get(email))
  console.log('üîç Taille du Map:', verificationCodes.size)
  console.log('üîç Toutes les cl√©s:', Array.from(verificationCodes.keys()))
  
  const data = verificationCodes.get(email)
  
  if (!data) {
    console.log('‚ùå Aucune donn√©e trouv√©e pour:', email)
    return { valid: false, expired: true, attempts: 0 }
  }
  
  const now = Date.now()
  console.log('‚è∞ Temps actuel:', now, 'Expiration:', data.expires, 'Diff√©rence:', data.expires - now)
  
  if (now > data.expires) {
    console.log('‚è∞ Code expir√© pour:', email)
    verificationCodes.delete(email)
    return { valid: false, expired: true, attempts: data.attempts }
  }
  
  console.log('üîë Comparaison codes - Re√ßu:', code, 'Stock√©:', data.code, 'Match:', data.code === code)
  
  if (data.code === code) {
    console.log('‚úÖ Code valide pour:', email)
    verificationCodes.delete(email)
    return { valid: true, expired: false, attempts: data.attempts }
  }
  
  // Incr√©menter les tentatives
  data.attempts++
  verificationCodes.set(email, data)
  console.log('‚ùå Code incorrect pour:', email, 'Tentatives:', data.attempts)
  
  return { valid: false, expired: false, attempts: data.attempts }
}

// Fonction pour obtenir les donn√©es de v√©rification
export function getVerificationData(email: string): VerificationData | null {
  return verificationCodes.get(email) || null
}